
# -*- coding: utf-8 -*-

import gom
import math
import time
import random
import os
import subprocess
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPM

# 2019-08-05 12:00
#************************************************************************************
#Rev05 ideas:
#       Adapt parameter (speckle size, step size) to values in the real world 
#		(speckle size: size in pixel of a point in camera image)
#	   Save to png with python tools: (Resolution of png depends on svg width)	   
#		from svglib.svglib import svg2rlg
#		from reportlab.graphics import renderPM
#		import os
#		
#		path = "U:\private\Entwicklung\Bemusterung\Daten dp_solution"
#		os.chdir(path)
#		
#		drawing = svg2rlg("test.svg")
#		
#		renderPM.drawToFile(drawing, "Pic.png")	
#************************************************************************************
#Rev04: 
#	   New parameter for 12M 0,6; 0,8; 1,7; 0,8 
#************************************************************************************
#************************************************************************************
#Rev03: Correct an error which leads to gaps in the pattern for some configurations
#       Correct an error which results in wrong pattern or crashes when using small 
#		print sizes compared to MV (now true randomness is switched on in these cases) 
#	   Add an option for ellipses instead of points to generate a different pattern 
#	   Add on option for a name tag in the pattern
#	   Correct an error in the black white ratio calculation 	   
#************************************************************************************
#************************************************************************************
#Rev02: Correct an error in the "True randomness" function, 
#	   Create separate project folder for every pattern 
#       Write setting file with all used parameter
# 	  Calculate black-white ratio (setting file) of png image (black-white ratio 
#	   only working with external python interpreter and pillow package),
#	   Dialog save file is now saved under AppData\Roaming\gom\2018\gom_scripts 
#************************************************************************************

#parameters not implemented in dialog
sample_file=True #Default: True. If true a sample file with facettes for 2.3M, 6M and 12M will be generated
aspect_ratio=0.8 #Default: 0.8. ratio between width and height of the pattern
width=1000 #Default: 1000. Width in pixel for svg file. Should not be changes otherwise speckle size, step etc. has to be adapted
patches=20 #Default: 50. Number of different patches that will be generated. Lower values => smaller file size but with lower randomness, higher value the opposite 
patch_number_x=4 #Default: 10. Sample file may not be correct if changed. Lower values => smaller file size but with lower randomness, higher value the opposite 
calc_black_white_ratio = True #Calculate black-white ratio og png (only working with external python interpreter and Pillow package)
activate_gimp=False
#
# dialog
#
DIALOG=gom.script.sys.create_user_defined_dialog (content='<dialog>' \
' <title>Pattern Generator</title>' \
' <style></style>' \
' <control id="OkCancel"/>' \
' <position>center</position>' \
' <embedding>always_toplevel</embedding>' \
' <sizemode>automatic</sizemode>' \
' <size height="780" width="515"/>' \
' <content rows="22" columns="4">' \
'  <widget row="0" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label</name>' \
'   <tooltip></tooltip>' \
'   <text>MV size</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="0" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_MV</name>' \
'   <tooltip></tooltip>' \
'   <value>100</value>' \
'   <minimum>30</minimum>' \
'   <maximum>50000</maximum>' \
'   <precision>0</precision>' \
'   <background_style></background_style>' \
'   <unit>LENGTH</unit>' \
'  </widget>' \
'  <widget row="0" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_7</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="0" column="3" type="image" rowspan="5" columnspan="1">' \
'   <name>image</name>' \
'   <tooltip></tooltip>' \
'   <use_system_image>false</use_system_image>' \
'   <system_image>system_message_warning</system_image>' \
'   <data><![CDATA[]]></data>' \
'   <file_name>T:/Downloads/Speckle/sample/pic.png</file_name>' \
'   <keep_original_size>false</keep_original_size>' \
'   <keep_aspect>true</keep_aspect>' \
'   <width>149</width>' \
'   <height>174</height>' \
'  </widget>' \
'  <widget row="1" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_1</name>' \
'   <tooltip></tooltip>' \
'   <text>Camera resolution</text>' \
'   <word_wrap>true</word_wrap>' \
'  </widget>' \
'  <widget row="1" column="1" type="input::list" rowspan="1" columnspan="1">' \
'   <name>list_camera</name>' \
'   <tooltip></tooltip>' \
'   <items>' \
'    <item>2.3M</item>' \
'    <item>6M</item>' \
'    <item>12M</item>' \
'    <item>User defined</item>' \
'   </items>' \
'   <default>2.3M</default>' \
'  </widget>' \
'  <widget row="1" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_8</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="2" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_2</name>' \
'   <tooltip></tooltip>' \
'   <text>Speckle size (min)</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="2" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_speckle_min</name>' \
'   <tooltip></tooltip>' \
'   <value>1</value>' \
'   <minimum>0</minimum>' \
'   <maximum>5</maximum>' \
'   <precision>2</precision>' \
'   <background_style></background_style>' \
'  </widget>' \
'  <widget row="2" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_9</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="3" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_3</name>' \
'   <tooltip></tooltip>' \
'   <text>Speckle size (max)</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="3" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_speckle_max</name>' \
'   <tooltip></tooltip>' \
'   <value>2</value>' \
'   <minimum>0</minimum>' \
'   <maximum>5</maximum>' \
'   <precision>2</precision>' \
'   <background_style></background_style>' \
'  </widget>' \
'  <widget row="3" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_10</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="4" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_4</name>' \
'   <tooltip></tooltip>' \
'   <text>Step size</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="4" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_step</name>' \
'   <tooltip></tooltip>' \
'   <value>3.4</value>' \
'   <minimum>0</minimum>' \
'   <maximum>20</maximum>' \
'   <precision>1</precision>' \
'   <background_style></background_style>' \
'  </widget>' \
'  <widget row="4" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_11</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="5" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_5</name>' \
'   <tooltip></tooltip>' \
'   <text>Randomness</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="5" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_randomness</name>' \
'   <tooltip></tooltip>' \
'   <value>0.8</value>' \
'   <minimum>0</minimum>' \
'   <maximum>10</maximum>' \
'   <precision>1</precision>' \
'   <background_style></background_style>' \
'  </widget>' \
'  <widget row="5" column="2" type="spacer::horizontal" rowspan="1" columnspan="1">' \
'   <name>spacer_12</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="5" column="3" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_true_randomness</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>True randomness         </title>' \
'  </widget>' \
'  <widget row="6" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_10</name>' \
'   <tooltip></tooltip>' \
'   <text>Output</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="6" column="1" type="input::file" rowspan="1" columnspan="3">' \
'   <name>output</name>' \
'   <tooltip></tooltip>' \
'   <type>directory</type>' \
'   <title>Choose File</title>' \
'   <default></default>' \
'   <limited>false</limited>' \
'   <file_types/>' \
'   <file_types_default></file_types_default>' \
'  </widget>' \
'  <widget row="7" column="0" type="separator" rowspan="1" columnspan="4">' \
'   <name>separator_4</name>' \
'   <tooltip></tooltip>' \
'   <title></title>' \
'  </widget>' \
'  <widget row="8" column="0" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_name_tag</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>Name tag</title>' \
'  </widget>' \
'  <widget row="8" column="1" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_large_MV</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>Ellipses</title>' \
'  </widget>' \
'  <widget row="8" column="2" type="spacer::horizontal" rowspan="1" columnspan="2">' \
'   <name>spacer_2</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="9" column="0" type="separator" rowspan="1" columnspan="4">' \
'   <name>separator_1</name>' \
'   <tooltip></tooltip>' \
'   <title></title>' \
'  </widget>' \
'  <widget row="10" column="0" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_print_size</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>Print size</title>' \
'  </widget>' \
'  <widget row="10" column="1" type="spacer::horizontal" rowspan="1" columnspan="3">' \
'   <name>spacer</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="11" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_print_size</name>' \
'   <tooltip></tooltip>' \
'   <text>Width x Height</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="11" column="1" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_print_width</name>' \
'   <tooltip></tooltip>' \
'   <value>100</value>' \
'   <minimum>1</minimum>' \
'   <maximum>5000</maximum>' \
'   <precision>1</precision>' \
'   <background_style></background_style>' \
'   <unit>LENGTH</unit>' \
'  </widget>' \
'  <widget row="11" column="2" type="label" rowspan="1" columnspan="1">' \
'   <name>label_6</name>' \
'   <tooltip></tooltip>' \
'   <text>x</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="11" column="3" type="input::number" rowspan="1" columnspan="1">' \
'   <name>input_print_height</name>' \
'   <tooltip></tooltip>' \
'   <value>80</value>' \
'   <minimum>1</minimum>' \
'   <maximum>5000</maximum>' \
'   <precision>1</precision>' \
'   <background_style></background_style>' \
'   <unit>LENGTH</unit>' \
'  </widget>' \
'  <widget row="12" column="0" type="separator" rowspan="1" columnspan="4">' \
'   <name>separator</name>' \
'   <tooltip></tooltip>' \
'   <title></title>' \
'  </widget>' \
'  <widget row="13" column="0" type="input::checkbox" rowspan="1" columnspan="4">' \
'   <name>checkbox_refpoints</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>Refpoints</title>' \
'  </widget>' \
'  <widget row="14" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_refpoints_position</name>' \
'   <tooltip></tooltip>' \
'   <text>Position</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="14" column="1" type="input::list" rowspan="1" columnspan="1">' \
'   <name>list_refpoints_position</name>' \
'   <tooltip></tooltip>' \
'   <items>' \
'    <item>Centered</item>' \
'    <item>In lower right corner</item>' \
'    <item>bottom-left</item>' \
'    <item>bottom-right</item>' \
'   </items>' \
'   <default>Centered</default>' \
'  </widget>' \
'  <widget row="14" column="2" type="spacer::horizontal" rowspan="1" columnspan="2">' \
'   <name>spacer_13</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="15" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_refpoints</name>' \
'   <tooltip></tooltip>' \
'   <text>Size</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="15" column="1" type="input::list" rowspan="1" columnspan="1">' \
'   <name>list_refpoint_size</name>' \
'   <tooltip></tooltip>' \
'   <items>' \
'    <item>0.4</item>' \
'    <item>0.8</item>' \
'    <item>1.5</item>' \
'    <item>3.0</item>' \
'    <item>5.0</item>' \
'    <item>8.0</item>' \
'    <item>12.0</item>' \
'    <item>18.0</item>' \
'   </items>' \
'   <default>0.4</default>' \
'  </widget>' \
'  <widget row="15" column="2" type="spacer::horizontal" rowspan="1" columnspan="2">' \
'   <name>spacer_14</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="16" column="0" type="separator" rowspan="1" columnspan="4">' \
'   <name>separator_2</name>' \
'   <tooltip></tooltip>' \
'   <title></title>' \
'  </widget>' \
'  <widget row="17" column="0" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_png2</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>PNG Export</title>' \
'  </widget>' \
'  <widget row="17" column="1" type="label" rowspan="1" columnspan="1">' \
'   <name>label_7</name>' \
'   <tooltip></tooltip>' \
'   <text>PNG Quality:</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="17" column="2" type="input::slider" rowspan="1" columnspan="2">' \
'   <name>input_png_quality</name>' \
'   <tooltip>1: 1000 pixel width, 2: 2000 pixel width, ....</tooltip>' \
'   <orientation>horizontal</orientation>' \
'   <value>2</value>' \
'   <minimum>1</minimum>' \
'   <maximum>5</maximum>' \
'   <precision>0</precision>' \
'   <step>1</step>' \
'   <tick_interval>10</tick_interval>' \
'  </widget>' \
'  <widget row="18" column="0" type="input::checkbox" rowspan="1" columnspan="1">' \
'   <name>checkbox_png</name>' \
'   <tooltip></tooltip>' \
'   <value>false</value>' \
'   <title>Gimp PNG Export</title>' \
'  </widget>' \
'  <widget row="18" column="1" type="spacer::horizontal" rowspan="1" columnspan="3">' \
'   <name>spacer_1</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="19" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_resolution</name>' \
'   <tooltip></tooltip>' \
'   <text>Resolution (dpi)</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="19" column="1" type="input::integer" rowspan="1" columnspan="1">' \
'   <name>input_resolution</name>' \
'   <tooltip></tooltip>' \
'   <value>600</value>' \
'   <minimum>90</minimum>' \
'   <maximum>4000</maximum>' \
'  </widget>' \
'  <widget row="19" column="2" type="spacer::horizontal" rowspan="1" columnspan="2">' \
'   <name>spacer_15</name>' \
'   <tooltip></tooltip>' \
'   <minimum_size>0</minimum_size>' \
'   <maximum_size>-1</maximum_size>' \
'  </widget>' \
'  <widget row="20" column="0" type="label" rowspan="1" columnspan="1">' \
'   <name>label_gimp</name>' \
'   <tooltip>Path to ...\\GIMP 2\\bin\\gimp-console-X.X.exe</tooltip>' \
'   <text>GIMP Pfad</text>' \
'   <word_wrap>false</word_wrap>' \
'  </widget>' \
'  <widget row="20" column="1" type="input::file" rowspan="1" columnspan="3">' \
'   <name>file_gimp</name>' \
'   <tooltip>path to gimp-x.x.exe</tooltip>' \
'   <type>any</type>' \
'   <title>Datei auswählen</title>' \
'   <default></default>' \
'   <limited>false</limited>' \
'   <file_types/>' \
'   <file_types_default></file_types_default>' \
'  </widget>' \
'  <widget row="21" column="0" type="separator" rowspan="1" columnspan="4">' \
'   <name>separator_3</name>' \
'   <tooltip></tooltip>' \
'   <title></title>' \
'  </widget>' \
' </content>' \
'</dialog>')

#
# import dialog settings from save file
#
dialog_save_file=os.getenv('APPDATA')+"\gom\\2019\gom_scripts\Pattern_print_save.dat"
if os.path.isfile(dialog_save_file)==True:
	#try:	 	
		with open(dialog_save_file) as rfile:	
			lines = rfile.readlines()[0:21]
		#Write settings to dialog 
		DIALOG.input_MV=lines[0]
		DIALOG.list_camera=lines[1].strip()
		DIALOG.input_speckle_min=lines[2]
		DIALOG.input_speckle_max=lines[3]
		DIALOG.input_step=lines[4]
		DIALOG.input_randomness=lines[5]
		DIALOG.output=lines[6].strip()
		DIALOG.list_refpoints_position=lines[8].strip()
		DIALOG.list_refpoint_size=lines[9].strip()
		DIALOG.input_resolution=lines[11]
		DIALOG.input_print_width=lines[15]
		DIALOG.input_print_height=lines[16]
		DIALOG.input_png_quality=lines[19]		
		#set large MV checkbox
		if lines[20].strip() =="True":
			DIALOG.checkbox_png2.value=True
		else:
			DIALOG.checkbox_png2.value=False
		#set large MV checkbox
		if lines[18].strip() =="True":
			DIALOG.checkbox_large_MV.value=True
		else:
			DIALOG.checkbox_large_MV.value=False
		#set name tag checkbox
		if lines[17].strip() =="True":
			DIALOG.checkbox_name_tag.value=True
		else:
			DIALOG.checkbox_name_tag.value=False
		#set true randomness checkbox
		if lines[14].strip() =="True":
			DIALOG.checkbox_true_randomness.value=True
		else:
			DIALOG.checkbox_true_randomness.value=False
		#set camera checkbox
		if lines[1].strip()!="User defined":
			DIALOG.input_randomness.enabled = False
			DIALOG.input_speckle_min.enabled = False
			DIALOG.input_speckle_max.enabled = False
			DIALOG.input_step.enabled = False
		#set reference points checkbox
		if lines[7].strip() =="True":
			DIALOG.checkbox_refpoints.value=True
		else:
			DIALOG.checkbox_refpoints.value=False
		#set png export checkbox
		if lines[10].strip() =="True":
			DIALOG.checkbox_png.value=True
		else:
			DIALOG.checkbox_png.value=False
		#set gimp path
		if lines[12].strip()!="none":
			DIALOG.file_gimp=lines[12].strip()
		#set print_size checkbox
		if lines[13].strip() =="True":
			DIALOG.checkbox_print_size.value=True
		else:
			DIALOG.checkbox_print_size.value=False
#	except:
	#	pass
else:
	DIALOG.input_randomness.enabled = False
	DIALOG.input_speckle_min.enabled = False
	DIALOG.input_speckle_max.enabled = False
	DIALOG.input_step.enabled = False
	
#
# Event handler function called if anything happens inside of the dialog
#	
def dialog_event_handler (widget):
	# Enable Large MV when MV size larger than 999mm
#	if DIALOG.input_MV.value > 999:
#		DIALOG.checkbox_large_MV.visible = True
#	else:
#		DIALOG.checkbox_large_MV.visible = False
#		DIALOG.checkbox_large_MV.value=False
	#check refpoints checkbox at start
	if DIALOG.checkbox_refpoints.value==False:
		DIALOG.list_refpoints_position.enabled = False
		DIALOG.label_refpoints.enabled = False
		DIALOG.list_refpoint_size.enabled = False
		DIALOG.label_refpoints_position.enabled = False
	#check export png checkbox at start
	if DIALOG.checkbox_png.value==False:
		DIALOG.label_resolution.enabled = False
		DIALOG.input_resolution.enabled = False
		DIALOG.label_gimp.enabled = False
		DIALOG.file_gimp.enabled = False
	#check print_size checkbox at start
	if DIALOG.checkbox_print_size.value==False:
		DIALOG.label_print_size.enabled = False
		DIALOG.input_print_width.enabled = False
		DIALOG.input_print_height.enabled = False
	#check live camera dropdown list
	if widget == DIALOG.list_camera or widget == DIALOG.checkbox_large_MV or widget == DIALOG.input_MV :
		if DIALOG.list_camera.value == '2.3M':
			if DIALOG.checkbox_large_MV.value == False:
				DIALOG.input_speckle_min.value = '1.2'
				DIALOG.input_speckle_max.value = '1.6'			
				DIALOG.input_step.value = '3.4'
				DIALOG.input_randomness.value = '0.8'
			else:
				DIALOG.input_speckle_min.value = '0.8'
				DIALOG.input_speckle_max.value = '1.6'			
				DIALOG.input_step.value = '3.9'
				DIALOG.input_randomness.value = '0.0'
			DIALOG.input_randomness.enabled = False
			DIALOG.input_speckle_min.enabled = False
			DIALOG.input_speckle_max.enabled = False
			DIALOG.input_step.enabled = False
		elif DIALOG.list_camera.value == '6M':
			if DIALOG.checkbox_large_MV.value == False:
				DIALOG.input_speckle_min.value = '0.9'
				DIALOG.input_speckle_max.value = '1.2'
				DIALOG.input_step.value = '2.6'
				DIALOG.input_randomness.value = '0.8'
			else:
				DIALOG.input_speckle_min.value = '0.6'
				DIALOG.input_speckle_max.value = '1.2'			
				DIALOG.input_step.value = '2.9'
				DIALOG.input_randomness.value = '0.0'
			DIALOG.input_randomness.enabled = False
			DIALOG.input_speckle_min.enabled = False
			DIALOG.input_speckle_max.enabled = False
			DIALOG.input_step.enabled = False
		elif DIALOG.list_camera.value == '12M':
			if DIALOG.checkbox_large_MV.value == False:
				DIALOG.input_speckle_min.value = '0.6'
				DIALOG.input_speckle_max.value = '0.8'
				DIALOG.input_step.value = '1.7'
				DIALOG.input_randomness.value = '0.8'
			else:
				DIALOG.input_speckle_min.value = '0.4'
				DIALOG.input_speckle_max.value = '0.8'
				DIALOG.input_step.value = '2.0'
				DIALOG.input_randomness.value = '0.0'
			DIALOG.input_randomness.enabled = False
			DIALOG.input_speckle_min.enabled = False
			DIALOG.input_speckle_max.enabled = False
			DIALOG.input_step.enabled = False
		elif DIALOG.list_camera.value == 'User defined':
			DIALOG.input_speckle_min.enabled = True
			DIALOG.input_speckle_max.enabled = True
			DIALOG.input_step.enabled = True
			DIALOG.input_randomness.enabled = True
	#check live refpoints checkbox
	if widget == DIALOG.checkbox_refpoints:
		if DIALOG.checkbox_refpoints.value==True:
			DIALOG.list_refpoints_position.enabled = True
			DIALOG.label_refpoints.enabled = True
			DIALOG.list_refpoint_size.enabled = True
			DIALOG.label_refpoints_position.enabled = True
	#check live png checkbox
	if widget == DIALOG.checkbox_png:
		if DIALOG.checkbox_png.value==True:
			DIALOG.label_resolution.enabled = True
			DIALOG.input_resolution.enabled = True
			DIALOG.label_gimp.enabled = True
			DIALOG.file_gimp.enabled = True
	#check live print_size checkbox
	if widget == DIALOG.checkbox_print_size:
		if DIALOG.checkbox_print_size.value==True:
			DIALOG.label_print_size.enabled = True
			DIALOG.input_print_width.enabled = True
			DIALOG.input_print_height.enabled = True
	#deactivate gimp export
	if activate_gimp == False:
		DIALOG.file_gimp.visible = False
		DIALOG.label_gimp.visible = False
		DIALOG.spacer_15.visible = False
		DIALOG.spacer_1.visible = False
		DIALOG.input_resolution.visible = False
		DIALOG.label_resolution.visible = False
		DIALOG.checkbox_png.visible = False
	#check if path to output directory and gimp exe are valid or promp error
	if os.path.isdir(str(DIALOG.output.value))==False or (os.path.isfile(str(DIALOG.file_gimp.value))==False and DIALOG.checkbox_png.value==True): 
		DIALOG.control.ok.enabled = False
		if os.path.isdir(str(DIALOG.output.value))==False:
			DIALOG.control.status = "Output directory does not exist!" 
		elif os.path.isfile(str(DIALOG.file_gimp.value))==False and DIALOG.checkbox_png.value==True:
			DIALOG.control.status = "Path to gimp-console-X.X.exe not set or incorrect!"
	else: 
		DIALOG.control.ok.enabled = True
		DIALOG.control.status=""

DIALOG.handler = dialog_event_handler

RESULT=gom.script.sys.show_user_defined_dialog (dialog=DIALOG)

#
#write dialog settings to variables	
#
MV_size=RESULT.input_MV
camera_resolution=RESULT.list_camera
speckle_size_min=RESULT.input_speckle_min
speckle_size_max=RESULT.input_speckle_max
step=RESULT.input_step 
randomness=RESULT.input_randomness
true_randomness=RESULT.checkbox_true_randomness
file_path=RESULT.output
file_path=file_path.replace("/","\\\\")+"\\\\"
checkbox_refpoints=RESULT.checkbox_refpoints
list_refpoints_position=RESULT.list_refpoints_position
point_size=float(RESULT.list_refpoint_size)
PNG_export=RESULT.checkbox_png
dpi=RESULT.input_resolution
gimp_path=RESULT.file_gimp
if gimp_path=="":
	gimp_path="none"
checkbox_print_size=RESULT.checkbox_print_size
print_width=RESULT.input_print_width
print_height=RESULT.input_print_height
height=width*aspect_ratio
MV_height=MV_size*aspect_ratio
if checkbox_print_size == False:
	print_width=(MV_size)
	print_height=(MV_height)
if print_width == int(print_width):
	print_width = int(print_width)
else:
	print_width=format(print_width, '.1f')
if print_height == int(print_height):
	print_height = int(print_height)
else:
	print_height=format(print_height, '.1f')
rand=round(step*randomness,1)
checkbox_name_tag=RESULT.checkbox_name_tag
checkbox_large_MV=RESULT.checkbox_large_MV
png_quality=RESULT.input_png_quality
checkbox_png2=RESULT.checkbox_png2
width=width*png_quality
#
#save dialog settings to save file 
#
try:
	result=[MV_size, camera_resolution, speckle_size_min, speckle_size_max, step, randomness, RESULT.output, checkbox_refpoints, list_refpoints_position, point_size, PNG_export, dpi, gimp_path, checkbox_print_size, true_randomness, print_width, print_height, checkbox_name_tag, checkbox_large_MV,png_quality,checkbox_png2]
	g=open(dialog_save_file,'w')
	for i in result:
		g.write(str(i)+"\n")
	g.close()
except:
	pass

	
#
#generate file name depending on print_size, camera resolution and refpoints
#
if list_refpoints_position == "Centered":
	ref_pos="c"
elif list_refpoints_position == "In lower right corner":
	ref_pos="lrc"
elif list_refpoints_position == "bottom-left":
	ref_pos="bl"
elif list_refpoints_position == "bottom-right":
	ref_pos="br"
#if checkbox_print_size==True:
name="Pattern"
if checkbox_large_MV == True:
	name="Ellipses"
if camera_resolution=="User defined":
	if checkbox_refpoints==True:
		name=name+"_MV"+str(int(MV_size))+"_"+str(print_width)+"x"+str(print_height)+"_User-defined("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")_ps"+str(point_size)+ref_pos
	else:
		name=name+"_MV"+str(int(MV_size))+"_"+str(print_width)+"x"+str(print_height)+"_User-defined("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"
else:
	if checkbox_refpoints==True: 
		name=name+"_MV"+str(int(MV_size))+"_"+str(print_width)+"x"+str(print_height)+"_"+camera_resolution+"("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"+"_ps"+str(point_size)+ref_pos

	else:
		name=name+"_MV"+str(int(MV_size))+"_"+str(print_width)+"x"+str(print_height)+"_"+camera_resolution+"("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"	
#else:
#	if camera_resolution=="User defined":
#		if checkbox_refpoints==True: 
#			name="Pattern_MV"+str(int(MV_size))+"_User-defined("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")_ps"+str(point_size)+ref_pos
#		else:
#			name="Pattern_MV"+str(int(MV_size))+"_User-defined("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"
#	else:
#		if checkbox_refpoints==True: 
#			name="Pattern_MV"+str(int(MV_size))+"_"+camera_resolution+"("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"+"_ps"+str(point_size)+ref_pos
#		else:
#			name="Pattern_MV"+str(int(MV_size))+"_"+camera_resolution+"("+str(speckle_size_min)+"-"+str(speckle_size_max)+","+str(step)+","+str(randomness)+")"
try:
	os.makedirs(file_path+name)
except:
	pass
file_path=file_path+name+"\\\\"
#
#adjust parameters if checkbox_print_size is true
#
if checkbox_print_size==True:
	scale_factor=MV_size/print_width
	aspect_ratio=print_height/print_width
	height=width*aspect_ratio
	MV_height=MV_size*aspect_ratio
	speckle_size_min=speckle_size_min*scale_factor
	speckle_size_max=speckle_size_max*scale_factor
	step=step*scale_factor
	rand=round(step*randomness,1)
else:
	scale_factor=1
	pass

speckle_size_min=png_quality*speckle_size_min
speckle_size_max=png_quality*speckle_size_max
step=png_quality*step 
rand=round(step*randomness,1)

#
#generate SVG-Header
#
f=open(file_path+name+".svg",'w')
f.write("<?xml version=\"1.0\" standalone=\"no\"?>\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"\">\n <svg width=\""+str(width)+"\" height=\""+str(height)+"\" version=\"1.1\"\n xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\"\n")

#
#generate pattern consist of small patches that are repeatingly applied
#
speckle_number_previous=0
lenght_pattern=(width/patch_number_x)-rand
format(step, '.2f')
number_circles_per_pattern=(lenght_pattern-(4*speckle_size_max)-step)/(step)+2 # if number is lower than 9 switch true randomness on
if number_circles_per_pattern < 9:
	true_randomness = True
else:
	step_corrected=(lenght_pattern-2*speckle_size_max)/(round(number_circles_per_pattern,0))

if true_randomness==False:
	f.write("<defs>\n")
	j=0
	#generate several different patches
	while j < patches:
		f.write("<symbol id=\"speckle"+str(j)+"\">\n")
		f.write("<rect x=\""+str(0)+ "\" y =\"" +str(0)+ "\" width=\"" +str(width/patch_number_x+(step_corrected*3/4))+ "\" height=\"" +str(2*speckle_size_max+rand)+ "\" fill=\"none"+ "\" />\n") 
		x=speckle_size_max
		y=speckle_size_max
		#generate dots with variable size in a row with randomized x and y coordinates
		while x < width/patch_number_x+(step_corrected)-rand-speckle_size_max+0.001:
			r=str('%.2f' %(random.uniform(speckle_size_min,speckle_size_max)))
			x_rand=str('%.1f' %(x+random.uniform(0,rand)))	
			y_rand=str('%.1f' %(y+random.uniform(0,rand)))
			if checkbox_large_MV == True:
				rot=random.randint(1,8)*22.5
				f.write("<ellipse cx=\"" +str('%.1f' %(x))+ "\" cy =\"" +str('%.1f' %(y))+ "\" rx=\"" +str(speckle_size_min)+ "\" ry=\"" +str(speckle_size_max)+ "\" transform=\"rotate("+str(rot)+","+str('%.1f' %(x))+","+str('%.1f' %(y))+")\" />\n")		
			else:
				f.write("<circle cx=\"" +x_rand+ "\" cy =\"" +y_rand+ "\" r=\"" +r+ "\" />\n")
			x=x+step_corrected				
		f.write("</symbol>\n")
		j=j+1
	f.write("</defs>\n")
	
	#combine pattches to a complete pattern with variations in rotation
	p=0
	x_grid=0
	y_grid=0
	odd_even=0
	if checkbox_large_MV == True:
		while p < patch_number_x+1+round((step_corrected*patch_number_x)/(width/patch_number_x),0):
			while y_grid < height-step:				
				if (odd_even) % 2: 
					x_grid=x_grid+step_corrected/2
				else:
					x_grid=x_grid-step_corrected/2
				odd_even=odd_even+1

				speckle_number=random.randint(0,patches-1)
				while speckle_number==speckle_number_previous:
					speckle_number=random.randint(0,patches-1)
				speckle_number_previous=speckle_number
				rotate_center_x='%.1f' %((width/patch_number_x)/2)
				rotate_center_y='%.1f' %((2*speckle_size_max+rand)/2)
				f.write("<use transform=\"translate("+str('%.1f' %(x_grid))+","+str('%.1f' %(y_grid))+")\" xlink:href=\"#speckle"+str(speckle_number)+"\" />\n")
				y_grid=y_grid+step_corrected*0.75
			if rand==0:
				x_grid=x_grid+width/patch_number_x+step_corrected-2*speckle_size_max
			else: 
				x_grid=x_grid+width/patch_number_x-step_corrected
			p=p+1
			y_grid=0
	else:
		while p < patch_number_x:#patch_number_x+1+round((step_corrected*patch_number_x)/(width/patch_number_x),0):
			while y_grid < height-step:
				angle=90*random.randint(0,1)*2
				speckle_number=random.randint(0,patches-1)
				while speckle_number==speckle_number_previous:
					speckle_number=random.randint(0,patches-1)
				speckle_number_previous=speckle_number
				rotate_center_x='%.1f' %((width/patch_number_x)/2)
				rotate_center_y='%.1f' %((2*speckle_size_max+rand)/2)
				if angle==0:
					f.write("<use transform=\"translate("+str('%.1f' %(x_grid))+","+str('%.1f' %(y_grid))+")\" xlink:href=\"#speckle"+str(speckle_number)+"\" />\n")
				if angle==180:
					f.write("<use transform=\"translate("+str('%.1f' %(x_grid))+","+str('%.1f' %(y_grid))+") rotate(180,"+str(rotate_center_x)+","+str(rotate_center_y)+")  \" xlink:href=\"#speckle"+str(speckle_number)+"\" />\n")
				y_grid=y_grid+step_corrected
			if rand==0:
				x_grid=x_grid+width/patch_number_x+step_corrected-2*speckle_size_max
			else: 
				x_grid=x_grid+width/patch_number_x#-(step_corrected*3/4) # colum distance (step_corrected*3/4) is a manually determinted parameter
			p=p+1
			y_grid=0
#
#generate pattern consists of dots with variable size set with randomly x- and y-coordinates
if checkbox_large_MV == True:
	from PIL import Image, ImageDraw

	image=Image.new("1", (1000,800),255)
	draw = ImageDraw.Draw(image)


if true_randomness==True:
	x=0
	y=0
	odd_even=0
	if checkbox_large_MV == True:
		while y < height/0.75:
			if (odd_even) % 2: 
				x=x+step/4
			else:
				x=x-step/4
			odd_even=odd_even+1				
			while x < width:
				r=str('%.2f' %(random.randint((int(speckle_size_min*100)),(int(speckle_size_max*100)))/100))
				x_rand=str('%.1f' %(x+(random.randint(0,rand*1000)/1000)))	
				y_rand=str('%.1f' %(y+(random.randint(0,rand*1000)/1000)))
				x=x+step
				rot=random.randint(1,8)*22.5		
				f.write("<ellipse cx=\"" +'%.1f' %(x)+ "\" cy =\"" +'%.1f' %(y)+ "\" rx=\"" +str(speckle_size_min)+ "\" ry=\"" +str(speckle_size_max)+ "\" transform=\"rotate("+str(rot)+","+str('%.1f' %(x))+","+str('%.1f' %(y))+")\" />\n")				
			y=y+step*0.75
			x=0
	else:
		while y < height-speckle_size_max:
			while x < width-speckle_size_max:
				r=(random.randint((int(speckle_size_min*100)),(int(speckle_size_max*100)))/100)
				x_rand=(x+(random.randint(0,rand*1000)/1000))	
				y_rand=(y+(random.randint(0,rand*1000)/1000))
				x=x+step
				f.write("<circle cx=\"" +'%.1f' %(x_rand)+ "\" cy =\"" +'%.1f' %(y_rand)+ "\" r=\"" +'%.2f' %(r)+ "\" />\n")
				#draw.ellipse((x-r, y-r, x+r, y+r), fill=(0))		
			y=y+step
			x=0

#image.save("C:/Temp/x.png")	
#
#create reference points
#
if checkbox_refpoints == True:
	if checkbox_print_size==False: 
		ref_point_size_white=point_size/(MV_size/width)/2
	else:
		ref_point_size_white=point_size/(MV_size/scale_factor/width)/2
	ref_point_size_black=2*ref_point_size_white
	ref_point_position_x=ref_point_size_black
	ref_point_position_y=ref_point_size_black
	
	#reference points in center position	
	if list_refpoints_position=="Centered": 
		refpoint_space=2
		white_rect=2*ref_point_position_x+4*ref_point_size_black
		f.write("<rect x=\""+str(width/2-white_rect/2)+ "\" y =\"" +str(height/2-white_rect/2)+ "\" width=\"" +str(white_rect)+ "\" height=\"" +str(white_rect)+ "\" fill=\"white"+ "\" />\n") 
		#Ref_point 1 (right, top)
		f.write("<circle cx=\"" +str('%.2f' %(width/2+ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2+ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %(width/2+ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2+ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 2 (right, bottom)
		f.write("<circle cx=\"" +str('%.2f' %(width/2+ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %(width/2+ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 3 (left, bottom)
		f.write("<circle cx=\"" +str('%.2f' %(width/2-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2+ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %(width/2-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2+ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")

	#reference points in lower right corner
	if list_refpoints_position=="In lower right corner":
		#Ref_point 1 (right, top)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 2 (right, bottom)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 3 (right, middle)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/6*4-ref_point_position_y/2))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/6*4-ref_point_position_y/2))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 3 (right, middle)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/6*5-ref_point_position_y/2))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/6*5-ref_point_position_y/2))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 4 (left, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n") 
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 5 (middle, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width/6*4)-ref_point_position_x/2))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %((width/6*4)-ref_point_position_x/2))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 5 (middle, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width/6*5)-ref_point_position_x/2))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %((width/6*5)-ref_point_position_x/2))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
	
	
	#reference points bottom-right
	if list_refpoints_position=="bottom-right":
		#Ref_point 1 (right, top)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 2 (right, bottom)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 3 (right, middle)
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(width-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 4 (left, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((ref_point_position_x)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n") 
		f.write("<circle cx=\"" +str('%.2f' %((ref_point_position_x)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 5 (middle, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
	
	#reference points bottom-left
	if list_refpoints_position=="bottom-left":
		#Ref_point 1 (left, top)
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 2 (left, bottom)
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 3 (left, middle)
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n" )
		f.write("<circle cx=\"" +str('%.2f' %(ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height/2))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 4 (left, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n") 
		f.write("<circle cx=\"" +str('%.2f' %((width/2)))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
		#Ref_point 5 (middle, bottom)
		f.write("<circle cx=\"" +str('%.2f' %((width)-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_black)+ "\" />\n")
		f.write("<circle cx=\"" +str('%.2f' %((width)-ref_point_position_x))+ "\" cy =\"" +str('%.2f' %(height-ref_point_position_y))+ "\" r=\"" +str('%.2f' %ref_point_size_white)+ "\" fill=\"white"+ "\" />\n")
#Write name tag
if checkbox_name_tag == True:
	if MV_height < 300:
		text_height=1000/MV_height*2
	if MV_height > 300:
		text_height=1000/MV_height*16
	name_tag=name[8:]
#	if text_height < 3:
#		text_height = 3
	f.write("<rect x=\"0\" y =\""+str(height-text_height*0.85)+"\" width=\""+str(text_height*15)+"\" height=\""+str(text_height*0.85)+"\" fill=\"white\" />\n")
	f.write("<text x=\""+str(text_height*15/2)+"\" y =\""+str(height-text_height*0.1)+"\" style=\"font-size:"+str(text_height)+"px\" text-anchor=\"middle\" fill=\"black\" letter-spacing=\"-"+str(text_height*0.1)+"\">"+name_tag+"</text>\n")
#		
#close SVG+file
#
f.write("</svg>")
f.close()

#
#write sample file
#
if sample_file==True:
	facette_size_pixel=19
	facette_size_2M=width/(1936/facette_size_pixel)
	facette_size_6M=width/(2750/facette_size_pixel)
	facette_size_12M=width/(4096/facette_size_pixel)
	s=open(file_path+name+"_sample.svg",'w')
	sample_scale=900/(width/patch_number_x)
	width=900
	speckle_size_max=round(speckle_size_max*sample_scale/scale_factor,2)
	speckle_size_min=round(speckle_size_min*sample_scale/scale_factor,2)
	step_corrected=step*sample_scale/scale_factor
	rand=round(rand*sample_scale/scale_factor,3)
	s.write("<?xml version=\"1.0\" standalone=\"no\"?>\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"\">\n <svg width=\""+str(1400)+"\" height=\""+str(900)+"\" version=\"1.1\"\n xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\"\n")
	x=speckle_size_max
	y=speckle_size_max
	odd_even=0
	if checkbox_large_MV == True:
		while y < (width-rand-speckle_size_max+0.001)/0.75:
			if (odd_even) % 2: 
				x=x+step_corrected/4
			else:
				x=x-step_corrected/4
			odd_even=odd_even+1
			while x < width-rand-speckle_size_max+0.001:
				r=str('%.2f' %(random.randint((int(speckle_size_min*100)),(int(speckle_size_max*100)))/100))
				x_rand=str('%.1f' %(x+(random.randint(0,rand*1000)/1000)))	
				y_rand=str('%.1f' %(y+(random.randint(0,rand*1000)/1000)))
				x=x+step_corrected
				rot=random.randint(1,8)*22.5		
				s.write("<ellipse cx=\"" +'%.1f' %(x)+ "\" cy =\"" +'%.1f' %(y)+ "\" rx=\"" +str(speckle_size_min)+ "\" ry=\"" +str(speckle_size_max)+ "\" transform=\"rotate("+str(rot)+","+str('%.1f' %(x))+","+str('%.1f' %(y))+")\" />\n")				
			y=y+step_corrected*0.75
			x=speckle_size_max
	else:
		while y < width-rand-speckle_size_max+0.001:
			while x < width-rand-speckle_size_max+0.001:
				r=str('%.2f' %(random.uniform(speckle_size_min,speckle_size_max)))
				x_rand=str('%.1f' %(x+random.uniform(0,rand)))	
				y_rand=str('%.1f' %(y+random.uniform(0,rand)))
				s.write("<circle cx=\"" +x_rand+ "\" cy =\"" +y_rand+ "\" r=\"" +r+ "\" />\n")
				x=x+step_corrected						
			y=y+step_corrected
			x=speckle_size_max
	
	#2.3M facettes
	s.write("<text x=\""+str(960)+ "\" y =\"" +str(180)+ "\" font-family=\"Verdana\" font-size=\"" +str(54)+ "\" stroke=\"none\" fill=\"green"+ "\"> 2.3M </text>\n") 
	s.write("<rect x=\""+str(120)+ "\" y =\"" +str(120)+ "\" width=\"" +str(facette_size_2M*sample_scale)+ "\" height=\"" +str(facette_size_2M*sample_scale)+ "\" stroke=\"green\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(420)+ "\" y =\"" +str(120)+ "\" width=\"" +str(facette_size_2M*sample_scale)+ "\" height=\"" +str(facette_size_2M*sample_scale)+ "\" stroke=\"green\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(720)+ "\" y =\"" +str(120)+ "\" width=\"" +str(facette_size_2M*sample_scale)+ "\" height=\"" +str(facette_size_2M*sample_scale)+ "\" stroke=\"green\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n")  
	#6M facettes
	s.write("<text x=\""+str(960)+ "\" y =\"" +str(480)+ "\" font-family=\"Verdana\" font-size=\"" +str(54)+ "\" stroke=\"none\" fill=\"red"+ "\"> 6M </text>\n") 
	s.write("<rect x=\""+str(120)+ "\" y =\"" +str(420)+ "\" width=\"" +str(facette_size_6M*sample_scale)+ "\" height=\"" +str(facette_size_6M*sample_scale)+ "\" stroke=\"red\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(420)+ "\" y =\"" +str(420)+ "\" width=\"" +str(facette_size_6M*sample_scale)+ "\" height=\"" +str(facette_size_6M*sample_scale)+ "\" stroke=\"red\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(720)+ "\" y =\"" +str(420)+ "\" width=\"" +str(facette_size_6M*sample_scale)+ "\" height=\"" +str(facette_size_6M*sample_scale)+ "\" stroke=\"red\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	#12M facettes
	s.write("<text x=\""+str(960)+ "\" y =\"" +str(780)+ "\" font-family=\"Verdana\" font-size=\"" +str(54)+ "\" stroke=\"none\" fill=\"blue"+ "\"> 12M </text>\n") 
	s.write("<rect x=\""+str(120)+ "\" y =\"" +str(720)+ "\" width=\"" +str(facette_size_12M*sample_scale)+ "\" height=\"" +str(facette_size_12M*sample_scale)+ "\" stroke=\"blue\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(420)+ "\" y =\"" +str(720)+ "\" width=\"" +str(facette_size_12M*sample_scale)+ "\" height=\"" +str(facette_size_12M*sample_scale)+ "\" stroke=\"blue\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("<rect x=\""+str(720)+ "\" y =\"" +str(720)+ "\" width=\"" +str(facette_size_12M*sample_scale)+ "\" height=\"" +str(facette_size_12M*sample_scale)+ "\" stroke=\"blue\" stroke-width=\"3\" stroke-opacity=\"0.8\" fill=\"none"+ "\" />\n") 
	s.write("</svg>")
	s.close()

#
# create PNG
#
if checkbox_png2 == True:	
	drawing = svg2rlg(file_path+name+".svg")
	renderPM.drawToFile(drawing, file_path+name+"_"+".png")
#
#create PNG (GIMP)
#
if PNG_export==True:
	file_path=file_path.replace("\\","\\\\\\\\")
	input=file_path+name+".svg"
	output=file_path+name+"_"+str(dpi)+"dpi.png"
	if checkbox_print_size==True: 
		resolution_width=int(dpi/25.4*(MV_size/scale_factor))
	else:
		resolution_width=int(dpi/25.4*MV_size)	
	resolution_height=aspect_ratio*resolution_width
	file_path_gimp=RESULT.file_gimp+" -i -b \"(file-svg-load 1 \\\""+input+"\\\" \\\"test.svg\\\" "+str(dpi)+" "+str(resolution_width)+" "+str(resolution_height)+" 0)\" -b \"(file-png-save 1 1 2 \\\""+output+"\\\" \\\"test.png\\\" 0 9 1 1 1 1 1)\" -b \"(gimp-quit 0)\""
	#subprocess.Popen(file_path_gimp)
	#proc= subprocess.Popen(file_path_gimp)
	subprocess.Popen(file_path_gimp).wait()
		
			
	# Calculate black white ratio
	if calc_black_white_ratio == True:
		try:
			from PIL import Image
			
			img = Image.open(output)
			pixel_x=img.size[0]
			pixel_y=img.size[1]
			
			img=img.crop((0.2*pixel_x,0.2*pixel_y, pixel_x-0.2*pixel_x, pixel_y-0.2*pixel_y)) # left, upper, right, lower
			
			histogram=img.histogram()[768:1024]
			white = sum(histogram[0:127])
			black = sum(histogram[127:256])
			
			black_ratio=int(round((black/(black+white)*100),0))
			white_ratio=int(round((white/(black+white)*100),0))
			black_white_ratio=str(black_ratio)+":"+str(white_ratio)
		except:
			pass

#
# Save setting file in project folder
#
try:
	result=["MV size: "+str(int(MV_size)), "Camera resolution: "+str(camera_resolution), 
	"Speckle size (min): "+str(RESULT.input_speckle_min), "Speckle size (max): "+str(RESULT.input_speckle_max), 
	"Step: "+str(RESULT.input_step), "Randomness: "+str(randomness), "True randomness: "+str(true_randomness),
	"Reference points: "+str(checkbox_refpoints), "Reference point position: "+str(list_refpoints_position), 
	"Reference point size: "+str(point_size),"PNG export: "+str(PNG_export), "DPI: "+str(dpi), 
	"Other print size: "+str(checkbox_print_size), "Print width: "+str(print_width), 
	"Print height: "+str(print_height), "Black white ratio: "+black_white_ratio]
	g=open(file_path+"Settings.txt",'w')
	for i in result:
		g.write(i+"\n")
	g.close()
except:
	result=["MV size: "+str(int(MV_size)), "Camera resolution: "+str(camera_resolution), 
	"Speckle size (min): "+str(RESULT.input_speckle_min), "Speckle size (max): "+str(RESULT.input_speckle_max), 
	"Step: "+str(RESULT.input_step), "Randomness: "+str(randomness), "True randomness: "+str(true_randomness),
	"Reference points: "+str(checkbox_refpoints), "Reference point position: "+str(list_refpoints_position), 
	"Reference point size: "+str(point_size),"PNG export: "+str(PNG_export), "DPI: "+str(dpi), 
	"Other print size: "+str(checkbox_print_size), "Print width: "+str(print_width), 
	"Print height: "+str(print_height)]
	g=open(file_path+"Settings.txt",'w')
	for i in result:
		g.write(i+"\n")
	g.close()
	
#	
#Create PNG with Python libraries (not working, needs cairosvg oder libsvg, not easy to install under windows)
#
#image=Image.new("1", (12000,9000),255)
#draw = ImageDraw.Draw(image)
#while y < height:
#	while x < width:
#		r=(random.randint((int(speckle_size_min*100)),(int(speckle_size_max*100)))/100)		
#		x_rand=(x+(random.randint(0,rand*1000)/1000))	
#		y_rand=(y+(random.randint(0,rand*1000)/1000))
#		x=x+step
#		#f.write("<circle cx=\"" +'%.1f' %(x_rand)+ "\" cy =\"" +'%.1f' %(y_rand)+ "\" r=\"" +'%.2f' %(r)+ "\" />\n")
#		draw.ellipse((x_rand-r, y_rand-r, x_rand+r, y_rand+r), fill=(0))				
#	y=y+step
#	x=0
##x=10
##y=10
##r=9
##draw.ellipse((x-r, y-r, x+r, y+r), fill=(0))
##draw.ellipse((x+20-r, y-r, x+20+r, y+r), fill=(0))
##draw.ellipse((x+40-r, y-r, x+40+r, y+r), fill=(0))
#image.save("C:/Temp/x.png")
#image2=image.resize((4000,3000),resample=2)
#image2.save("C:/Temp/x_2.png")

